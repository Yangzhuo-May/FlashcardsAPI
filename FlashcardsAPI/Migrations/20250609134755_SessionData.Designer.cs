// <auto-generated />
using System;
using FlashcardsAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FlashcardsAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250609134755_SessionData")]
    partial class SessionData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FlashcardsAPI.Models.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AnswerId"));

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CardId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.HasKey("AnswerId");

                    b.HasIndex("CardId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("FlashcardsAPI.Models.AnswerRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AnsweredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("CorrectRate")
                        .HasColumnType("real");

                    b.Property<int>("StackId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AnswerRecords");
                });

            modelBuilder.Entity("FlashcardsAPI.Models.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CardId"));

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StackId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("CardId");

                    b.HasIndex("StackId");

                    b.HasIndex("UserId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("FlashcardsAPI.Models.FavoriteStack", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FavoriteId"));

                    b.Property<int>("StackId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("FavoriteId");

                    b.HasIndex("StackId");

                    b.HasIndex("UserId", "StackId")
                        .IsUnique();

                    b.ToTable("FavoriteStacks");
                });

            modelBuilder.Entity("FlashcardsAPI.Models.Stack", b =>
                {
                    b.Property<int>("StackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StackId"));

                    b.Property<int>("FavoriteCount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsProficient")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean");

                    b.Property<string>("StackName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("StackId");

                    b.HasIndex("UserId");

                    b.ToTable("Stacks");
                });

            modelBuilder.Entity("FlashcardsAPI.Models.StackLearningStats", b =>
                {
                    b.Property<int>("StackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StackId"));

                    b.Property<int>("HighestSore")
                        .HasColumnType("integer");

                    b.Property<int>("StackId1")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("StackId");

                    b.HasIndex("StackId1");

                    b.HasIndex("UserId");

                    b.ToTable("StackLearningStats");
                });

            modelBuilder.Entity("FlashcardsAPI.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FlashcardsAPI.Models.UserLearningStats", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("LastStudyTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId1")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("UserLearningStats");
                });

            modelBuilder.Entity("FlashcardsAPI.Models.Answer", b =>
                {
                    b.HasOne("FlashcardsAPI.Models.Card", "Card")
                        .WithMany("Answers")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("FlashcardsAPI.Models.Card", b =>
                {
                    b.HasOne("FlashcardsAPI.Models.Stack", "Stack")
                        .WithMany("Cards")
                        .HasForeignKey("StackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlashcardsAPI.Models.User", null)
                        .WithMany("Cards")
                        .HasForeignKey("UserId");

                    b.Navigation("Stack");
                });

            modelBuilder.Entity("FlashcardsAPI.Models.FavoriteStack", b =>
                {
                    b.HasOne("FlashcardsAPI.Models.Stack", "Stack")
                        .WithMany()
                        .HasForeignKey("StackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlashcardsAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stack");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlashcardsAPI.Models.Stack", b =>
                {
                    b.HasOne("FlashcardsAPI.Models.User", "User")
                        .WithMany("Stacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlashcardsAPI.Models.StackLearningStats", b =>
                {
                    b.HasOne("FlashcardsAPI.Models.Stack", "Stack")
                        .WithMany()
                        .HasForeignKey("StackId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlashcardsAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stack");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlashcardsAPI.Models.UserLearningStats", b =>
                {
                    b.HasOne("FlashcardsAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FlashcardsAPI.Models.Card", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("FlashcardsAPI.Models.Stack", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("FlashcardsAPI.Models.User", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Stacks");
                });
#pragma warning restore 612, 618
        }
    }
}
